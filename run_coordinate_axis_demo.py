#!/usr/bin/env python3
"""Script de demostraci√≥n para el dibujador de ejes de coordenadas.

Este script muestra c√≥mo usar el CoordinateAxisDrawer junto con las detecciones
existentes para a√±adir un sistema de coordenadas visual a los frames.
"""

import cv2
import numpy as np
import sys
from pathlib import Path

# Agregar el directorio src al path
sys.path.append(str(Path(__file__).parent / "src"))

from vision.detector import YOLOPoseDetector
from postprocess.coordinate_axis_drawer import CoordinateAxisDrawer, add_coordinate_system_to_frame
from postprocess.distance_calculator import DistanceCalculator
from postprocess.marker_distance_calculator import MarkerDistanceCalculator
from utils.helpers import ConfigManager

def main():
    """Funci√≥n principal del demo."""
    print("üéØ Demo del Sistema de Coordenadas")
    print("Controles:")
    print("  'q' - Salir")
    print("  '1' - Esquina inferior derecha (default)")
    print("  '2' - Esquina inferior izquierda")
    print("  '3' - Esquina superior derecha")
    print("  '4' - Esquina superior izquierda")
    print("  '+' - Aumentar tama√±o")
    print("  '-' - Disminuir tama√±o")
    print("  'c' - Cambiar colores")
    print("  's' - Guardar frame actual")
    print()
    
    # Configuraci√≥n
    config_path = "config/config.yaml"
    
    try:
        # Inicializar componentes
        detector = YOLOPoseDetector(config_path)
        detector.load_model()
        
        distance_calculator = DistanceCalculator(pixels_per_cm=10.0)
        marker_calculator = MarkerDistanceCalculator(pixels_per_cm=10.0)
        
        # Inicializar dibujador de coordenadas
        coord_drawer = CoordinateAxisDrawer(
            position="bottom_right",
            size=80,
            margin=30
        )
        
        # Inicializar c√°mara
        cap = cv2.VideoCapture(0)  # Usar c√°mara por defecto
        
        if not cap.isOpened():
            print("‚ùå Error: No se pudo abrir la c√°mara")
            return
        
        print("‚úÖ C√°mara inicializada")
        print("‚úÖ Detector YOLO cargado")
        print("‚úÖ Sistema de coordenadas listo")
        print()
        
        # Variables para el demo
        color_mode = 0
        color_schemes = [
            {"x_color": (0, 0, 255), "z_color": (0, 255, 0), "origin_color": (255, 255, 255)},  # Rojo/Verde
            {"x_color": (255, 0, 0), "z_color": (0, 255, 255), "origin_color": (255, 255, 255)},  # Azul/Amarillo
            {"x_color": (255, 0, 255), "z_color": (0, 255, 255), "origin_color": (255, 255, 255)},  # Magenta/Cian
            {"x_color": (128, 0, 255), "z_color": (0, 255, 128), "origin_color": (255, 255, 255)}   # P√∫rpura/Verde lima
        ]
        
        frame_counter = 0
        
        while True:
            ret, frame = cap.read()
            if not ret:
                print("‚ùå Error: No se pudo leer el frame")
                break
            
            frame_counter += 1
            
            try:
                # Realizar detecciones
                detections = detector.detect(frame)
                
                # Dibujar detecciones b√°sicas
                processed_frame = detector.draw_detections(frame, detections)
                
                # A√±adir c√°lculos de distancia si hay detecciones
                if detections:
                    # Distancia pulsador-p√≥rtico
                    processed_frame = distance_calculator.draw_distance_on_frame(
                        processed_frame, detections, show_distance=True, show_line=True
                    )
                    
                    # Distancia del marcador
                    processed_frame = marker_calculator.draw_distance_on_frame(
                        processed_frame, detections, show_distance=True, show_line=True
                    )
                
                # A√±adir sistema de coordenadas
                processed_frame = coord_drawer.draw_coordinate_system(processed_frame)
                
                # A√±adir informaci√≥n del sistema
                info_text = f"Frame: {frame_counter} | Detecciones: {len(detections) if detections else 0}"
                cv2.putText(processed_frame, info_text, (10, 30),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                
                # Informaci√≥n del sistema de coordenadas
                coord_info = f"Posicion: {coord_drawer.position} | Tama√±o: {coord_drawer.size}px"
                cv2.putText(processed_frame, coord_info, (10, 60),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
                
                # Mostrar frame
                cv2.imshow("Demo Sistema de Coordenadas", processed_frame)
                
                # Manejar teclas
                key = cv2.waitKey(1) & 0xFF
                
                if key == ord('q'):
                    break
                elif key == ord('1'):
                    coord_drawer.set_position("bottom_right")
                    print("üìç Posici√≥n: Esquina inferior derecha")
                elif key == ord('2'):
                    coord_drawer.set_position("bottom_left")
                    print("üìç Posici√≥n: Esquina inferior izquierda")
                elif key == ord('3'):
                    coord_drawer.set_position("top_right")
                    print("üìç Posici√≥n: Esquina superior derecha")
                elif key == ord('4'):
                    coord_drawer.set_position("top_left")
                    print("üìç Posici√≥n: Esquina superior izquierda")
                elif key == ord('+') or key == ord('='):
                    new_size = min(coord_drawer.size + 10, 150)
                    coord_drawer.set_size(new_size)
                    print(f"üìè Tama√±o aumentado: {new_size}px")
                elif key == ord('-'):
                    new_size = max(coord_drawer.size - 10, 30)
                    coord_drawer.set_size(new_size)
                    print(f"üìè Tama√±o reducido: {new_size}px")
                elif key == ord('c'):
                    color_mode = (color_mode + 1) % len(color_schemes)
                    coord_drawer.set_colors(**color_schemes[color_mode])
                    print(f"üé® Esquema de colores cambiado: {color_mode + 1}")
                elif key == ord('s'):
                    filename = f"coordinate_demo_frame_{frame_counter}.jpg"
                    cv2.imwrite(filename, processed_frame)
                    print(f"üíæ Frame guardado: {filename}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error procesando frame: {e}")
                continue
        
    except KeyboardInterrupt:
        print("\nüõë Interrumpido por el usuario")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        # Limpiar recursos
        if 'cap' in locals():
            cap.release()
        cv2.destroyAllWindows()
        print("üßπ Recursos liberados")

def demo_static_image():
    """Demo con imagen est√°tica para pruebas."""
    print("üñºÔ∏è Demo con imagen est√°tica")
    
    # Crear una imagen de prueba
    height, width = 480, 640
    test_image = np.zeros((height, width, 3), dtype=np.uint8)
    
    # A√±adir algunos elementos de prueba
    cv2.rectangle(test_image, (50, 50), (200, 150), (100, 100, 100), -1)
    cv2.circle(test_image, (320, 240), 50, (150, 150, 150), -1)
    cv2.putText(test_image, "Imagen de Prueba", (220, 400),
               cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    
    # Probar diferentes posiciones
    positions = ["bottom_right", "bottom_left", "top_right", "top_left"]
    
    for i, position in enumerate(positions):
        # Crear imagen con sistema de coordenadas
        result = add_coordinate_system_to_frame(
            test_image.copy(), 
            position=position, 
            size=60, 
            margin=20
        )
        
        # A√±adir t√≠tulo
        title = f"Posicion: {position}"
        cv2.putText(result, title, (10, 30),
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)
        
        # Mostrar y guardar
        cv2.imshow(f"Demo Est√°tico - {position}", result)
        cv2.imwrite(f"demo_static_{position}.jpg", result)
        
        print(f"‚úÖ Imagen guardada: demo_static_{position}.jpg")
        
        # Esperar tecla para continuar
        cv2.waitKey(2000)  # 2 segundos
    
    cv2.destroyAllWindows()
    print("üéØ Demo est√°tico completado")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Demo del Sistema de Coordenadas")
    parser.add_argument("--static", action="store_true", 
                       help="Ejecutar demo con imagen est√°tica")
    
    args = parser.parse_args()
    
    if args.static:
        demo_static_image()
    else:
        main()