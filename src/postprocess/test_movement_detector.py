"""
Script de prueba para el detector de movimiento inteligente.
Demuestra c√≥mo el sistema filtra datos MQTT cuando el pulsador no se mueve realmente.
"""

import time
import random
import json
from movement_detector import MovementDetector

def simulate_detection_noise(base_position, noise_level=2.0):
    """
    Simula ruido en la detecci√≥n de posiciones.
    
    Args:
        base_position: Posici√≥n base (x, y)
        noise_level: Nivel de ruido en p√≠xeles
        
    Returns:
        Posici√≥n con ruido a√±adido
    """
    noise_x = random.uniform(-noise_level, noise_level)
    noise_y = random.uniform(-noise_level, noise_level)
    return (base_position[0] + noise_x, base_position[1] + noise_y)

def simulate_real_movement(start_pos, end_pos, progress):
    """
    Simula movimiento real entre dos posiciones.
    
    Args:
        start_pos: Posici√≥n inicial (x, y)
        end_pos: Posici√≥n final (x, y)
        progress: Progreso del movimiento (0.0 a 1.0)
        
    Returns:
        Posici√≥n interpolada
    """
    x = start_pos[0] + (end_pos[0] - start_pos[0]) * progress
    y = start_pos[1] + (end_pos[1] - start_pos[1]) * progress
    return (x, y)

def test_movement_detection():
    """
    Prueba el detector de movimiento con diferentes escenarios.
    """
    print("üîç Iniciando prueba del detector de movimiento inteligente")
    print("=" * 60)
    
    # Crear detector con configuraci√≥n de prueba
    detector = MovementDetector(
        distance_threshold_cm=0.5,
        velocity_threshold_cm_s=0.3,
        position_stability_frames=3,
        temporal_window_seconds=1.5
    )
    
    # Posiciones base
    pulsador_base = (100, 200)
    portico_base = (300, 200)
    
    print("\nüìä Escenario 1: Posiciones estables con ruido (no deber√≠a enviar)")
    print("-" * 50)
    
    for i in range(10):
        # Simular ruido en posiciones estables
        pulsador_pos = simulate_detection_noise(pulsador_base, 1.5)
        portico_pos = simulate_detection_noise(portico_base, 1.0)
        
        # Calcular distancia con peque√±as variaciones por ruido
        distance = 50.0 + random.uniform(-0.3, 0.3)
        
        detector.update_positions(pulsador_pos, portico_pos, distance)
        should_send = detector.should_send_distance(distance)
        
        print(f"Frame {i+1:2d}: Distancia={distance:5.2f}cm, Enviar={should_send}, "
              f"Pulsador=({pulsador_pos[0]:6.1f},{pulsador_pos[1]:6.1f})")
        
        time.sleep(0.1)
    
    print("\nüìä Escenario 2: Movimiento real del pulsador (deber√≠a enviar)")
    print("-" * 50)
    
    start_pos = (100, 200)
    end_pos = (150, 250)
    
    for i in range(10):
        # Simular movimiento real
        progress = i / 9.0
        pulsador_pos = simulate_real_movement(start_pos, end_pos, progress)
        portico_pos = simulate_detection_noise(portico_base, 1.0)
        
        # Calcular distancia que cambia con el movimiento
        distance = 50.0 + progress * 10.0  # Distancia aumenta con el movimiento
        
        detector.update_positions(pulsador_pos, portico_pos, distance)
        should_send = detector.should_send_distance(distance)
        
        print(f"Frame {i+1:2d}: Distancia={distance:5.2f}cm, Enviar={should_send}, "
              f"Pulsador=({pulsador_pos[0]:6.1f},{pulsador_pos[1]:6.1f})")
        
        time.sleep(0.2)
    
    print("\nüìä Escenario 3: Cambios r√°pidos por errores de detecci√≥n (deber√≠a filtrar)")
    print("-" * 50)
    
    for i in range(8):
        # Simular errores de detecci√≥n que causan saltos
        if i % 2 == 0:
            pulsador_pos = (100, 200)
            distance = 50.0
        else:
            pulsador_pos = (120, 220)  # Salto por error de detecci√≥n
            distance = 52.0
        
        portico_pos = simulate_detection_noise(portico_base, 1.0)
        
        detector.update_positions(pulsador_pos, portico_pos, distance)
        should_send = detector.should_send_distance(distance)
        
        print(f"Frame {i+1:2d}: Distancia={distance:5.2f}cm, Enviar={should_send}, "
              f"Pulsador=({pulsador_pos[0]:6.1f},{pulsador_pos[1]:6.1f})")
        
        time.sleep(0.05)  # Cambios muy r√°pidos
    
    # Mostrar m√©tricas finales
    print("\nüìà M√©tricas finales del detector")
    print("=" * 40)
    
    metrics = detector.get_movement_metrics()
    statistics = detector.get_filter_statistics()
    
    print(f"Total de c√°lculos: {statistics['total_calculations']}")
    print(f"Distancias enviadas: {statistics['sent_distances']}")
    print(f"Tasa de filtrado: {statistics['filter_rate_percent']:.1f}%")
    print(f"\nFiltros aplicados:")
    for filter_name, filter_data in statistics['filters'].items():
        print(f"  - {filter_name}: {filter_data['count']} ({filter_data['percentage']:.1f}%)")
    
    print(f"\nVelocidades promedio:")
    print(f"  - Pulsador: {metrics['pulsador_velocity_px_s']:.2f} px/s")
    print(f"  - P√≥rtico: {metrics['portico_velocity_px_s']:.2f} px/s")
    print(f"  - Relativa: {metrics['relative_velocity_px_s']:.2f} px/s")
    print(f"  - Distancia: {metrics['distance_velocity_cm_s']:.2f} cm/s")

def test_filter_configuration():
    """
    Prueba la configuraci√≥n din√°mica de filtros.
    """
    print("\nüîß Prueba de configuraci√≥n de filtros")
    print("=" * 40)
    
    detector = MovementDetector()
    
    # Deshabilitar filtro de velocidad
    detector.enable_filter('velocity', False)
    print("‚úÖ Filtro de velocidad deshabilitado")
    
    # Deshabilitar filtro de estabilidad
    detector.enable_filter('stability', False)
    print("‚úÖ Filtro de estabilidad deshabilitado")
    
    # Mostrar estado de filtros
    stats = detector.get_filter_statistics()
    print("\nüìã Estado actual de filtros:")
    for filter_name, enabled in stats['filter_status'].items():
        status = "üü¢ Habilitado" if enabled else "üî¥ Deshabilitado"
        print(f"  - {filter_name}: {status}")

def test_config_file():
    """
    Prueba la carga de configuraci√≥n desde archivo.
    """
    print("\nüìÑ Prueba de configuraci√≥n desde archivo")
    print("=" * 40)
    
    # Crear configuraci√≥n de prueba
    test_config = {
        "movement_detection": {
            "distance_threshold_cm": 1.0,
            "velocity_threshold_cm_s": 0.5,
            "position_stability_frames": 8,
            "temporal_window_seconds": 3.0
        },
        "mqtt_filtering": {
            "enable_movement_detection": True,
            "enable_velocity_filter": False,
            "enable_stability_filter": True,
            "enable_relative_movement_filter": True,
            "enable_temporal_filter": False
        },
        "debug": {
            "log_movement_metrics": True,
            "log_filtered_attempts": True
        }
    }
    
    # Guardar configuraci√≥n de prueba
    config_file = "test_movement_config.json"
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(test_config, f, indent=2)
    
    # Crear detector con configuraci√≥n personalizada
    detector = MovementDetector(config_file=config_file)
    
    print(f"‚úÖ Detector creado con configuraci√≥n desde {config_file}")
    print(f"üìä Umbral de distancia: {detector.distance_threshold_cm} cm")
    print(f"üìä Umbral de velocidad: {detector.velocity_threshold_cm_s} cm/s")
    print(f"üìä Frames de estabilidad: {detector.position_stability_frames}")
    
    # Limpiar archivo de prueba
    import os
    os.remove(config_file)
    print(f"üóëÔ∏è Archivo de configuraci√≥n de prueba eliminado")

if __name__ == "__main__":
    try:
        test_movement_detection()
        test_filter_configuration()
        test_config_file()
        
        print("\n‚úÖ Todas las pruebas completadas exitosamente")
        print("\nüí° El detector de movimiento inteligente est√° funcionando correctamente.")
        print("   Ahora el sistema MQTT solo enviar√° datos cuando detecte movimiento real")
        print("   del pulsador, evitando spam por errores de detecci√≥n.")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()