#!/usr/bin/env python3
"""
Script de prueba para verificar que la l√≠nea horizontal y el punto del pulsador
se dibujan a la altura del punto D del p√≥rtico.
"""

import sys
import os
import cv2
import numpy as np

sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from postprocess.distance_calculator import DistanceCalculator

def test_line_at_portico_d_height():
    """
    Prueba que la l√≠nea horizontal se dibuje a la altura del punto D del p√≥rtico.
    """
    print("üß™ Iniciando prueba de l√≠nea a la altura del punto D del p√≥rtico...")
    
    # Crear imagen de prueba
    test_frame = np.zeros((600, 800, 3), dtype=np.uint8)
    test_frame.fill(50)  # Fondo gris oscuro
    
    # Crear instancia del calculador
    distance_calc = DistanceCalculator(pixels_per_cm=10.0)
    
    # Simular detecciones con pulsador y p√≥rtico a diferentes alturas
    test_detections = [
        {
            'class_name': 'pulsador',
            'keypoints': [
                [200, 400, 0.9],  # keypoint 1 - pulsador en altura 400
                [220, 420, 0.9],  # keypoint 2
                [240, 440, 0.9],  # keypoint 3
                [260, 460, 0.9]   # keypoint 4
            ]
        },
        {
            'class_name': 'portico',
            'keypoints': [
                [100, 150, 0.9],  # A - esquina superior izquierda
                [600, 150, 0.9],  # B - esquina superior derecha
                [600, 350, 0.9],  # C - esquina inferior derecha
                [500, 250, 0.9]   # D - punto de referencia en altura 250
            ]
        }
    ]
    
    print("üîß DistanceCalculator inicializado en modo standalone")
    
    # Forzar calibraci√≥n autom√°tica
    print("üìè Forzando calibraci√≥n autom√°tica...")
    distance_calc.auto_calibrate(test_detections)
    
    # Dibujar l√≠nea de distancia en frame de prueba
    print("üé® Dibujando l√≠nea de distancia en frame de prueba...")
    result_frame = distance_calc.draw_distance_on_frame(
        test_frame, 
        test_detections, 
        show_distance=True, 
        show_line=True
    )
    
    # Agregar informaci√≥n visual para verificaci√≥n
    pulsador_midpoint = distance_calc.get_pulsador_midpoint(test_detections)
    portico_keypoint_d = distance_calc.get_portico_keypoint_d(test_detections)
    
    if pulsador_midpoint and portico_keypoint_d:
        # Dibujar l√≠neas de referencia para mostrar las alturas
        # L√≠nea horizontal en la altura original del pulsador (para comparaci√≥n)
        cv2.line(result_frame, (0, int(pulsador_midpoint[1])), (800, int(pulsador_midpoint[1])), 
                (100, 100, 100), 1)  # L√≠nea gris tenue
        cv2.putText(result_frame, f"Altura original pulsador: {int(pulsador_midpoint[1])}", 
                   (10, int(pulsador_midpoint[1]) - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (100, 100, 100), 1)
        
        # L√≠nea horizontal en la altura del punto D del p√≥rtico
        cv2.line(result_frame, (0, int(portico_keypoint_d[1])), (800, int(portico_keypoint_d[1])), 
                (255, 255, 255), 1)  # L√≠nea blanca
        cv2.putText(result_frame, f"Altura punto D portico: {int(portico_keypoint_d[1])}", 
                   (10, int(portico_keypoint_d[1]) + 15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # Marcar el punto original del pulsador (para comparaci√≥n)
        cv2.circle(result_frame, (int(pulsador_midpoint[0]), int(pulsador_midpoint[1])), 
                  3, (150, 150, 150), -1)  # Punto gris peque√±o
        cv2.putText(result_frame, "Original", (int(pulsador_midpoint[0]) + 10, int(pulsador_midpoint[1])), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.4, (150, 150, 150), 1)
    
    # Agregar t√≠tulo y explicaci√≥n
    cv2.putText(result_frame, "Prueba: Linea a la altura del punto D del portico", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
    
    cv2.putText(result_frame, "- Punto verde: pulsador ajustado a altura D", (10, 60),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
    cv2.putText(result_frame, "- Punto azul: punto D del portico", (10, 80),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)
    cv2.putText(result_frame, "- Linea amarilla: distancia horizontal", (10, 100),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)
    
    # Guardar imagen
    output_path = "test_line_at_portico_d_height.jpg"
    cv2.imwrite(output_path, result_frame)
    print(f"üíæ Imagen guardada como: {output_path}")
    
    # Mostrar imagen
    print("üñºÔ∏è Mostrando imagen de prueba...")
    print("   - La l√≠nea amarilla debe estar a la altura del punto D del p√≥rtico")
    print("   - El punto verde del pulsador debe estar en la misma l√≠nea horizontal")
    print("   - El punto gris muestra la posici√≥n original del pulsador")
    
    cv2.imshow("Prueba: Linea a la altura del punto D", result_frame)
    
    print("\n‚úÖ Verificaciones:")
    print("   1. ¬øLa l√≠nea amarilla est√° a la altura del punto D? (debe ser S√ç)")
    print("   2. ¬øEl punto verde est√° en la misma l√≠nea horizontal? (debe ser S√ç)")
    print("   3. ¬øSe ve la diferencia con la posici√≥n original? (debe ser S√ç)")
    
    print("\n‚å®Ô∏è Presiona cualquier tecla en la ventana de imagen para continuar...")
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    print("üéØ Prueba completada!")
    print(f"üìÅ Revisa la imagen guardada: {output_path}")

if __name__ == "__main__":
    test_line_at_portico_d_height()