#!/usr/bin/env python3
"""
Script de prueba para verificar la conexi√≥n robusta a DicapuaIoT
con reconexi√≥n autom√°tica y reintentos
"""

import sys
import os
import time
import logging

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from mqtt.dicapua_publisher import DicapuaPublisher

# Configurar logging detallado
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_robust_connection():
    """Prueba la conexi√≥n robusta con reconexi√≥n autom√°tica"""
    logger.info("üöÄ Iniciando prueba de conexi√≥n robusta a DicapuaIoT")
    logger.info("=" * 60)
    
    try:
        # Crear instancia del publisher
        publisher = DicapuaPublisher()
        
        # Iniciar conexi√≥n en modo directo
        logger.info("üì° Iniciando conexi√≥n...")
        if publisher.start_client_direct_mode():
            logger.info("‚úÖ Cliente iniciado, esperando conexi√≥n...")
            
            # Esperar conexi√≥n inicial
            for i in range(10):
                time.sleep(1)
                if publisher.dicapua_connected:
                    logger.info(f"‚úÖ Conectado despu√©s de {i+1} segundos")
                    break
                logger.info(f"‚è≥ Esperando conexi√≥n... ({i+1}/10)")
            
            if not publisher.dicapua_connected:
                logger.warning("‚ö†Ô∏è No se pudo establecer conexi√≥n inicial")
                logger.info("üîÑ Esperando reconexi√≥n autom√°tica...")
                
                # Esperar reconexi√≥n autom√°tica
                for i in range(30):
                    time.sleep(2)
                    if publisher.dicapua_connected:
                        logger.info(f"‚úÖ Reconectado autom√°ticamente despu√©s de {(i+1)*2} segundos")
                        break
                    if i % 5 == 0:
                        logger.info(f"‚è≥ Esperando reconexi√≥n... ({(i+1)*2}/60 segundos)")
            
            # Probar env√≠o de datos si estamos conectados
            if publisher.dicapua_connected:
                logger.info("üì§ Probando env√≠o de datos...")
                
                # Simular datos de marcador
                marker_data = {
                    "distance_cm": 7.5,
                    "timestamp": time.time(),
                    "type": "marker"
                }
                
                # Simular datos de p√≥rtico
                portico_data = {
                    "distance_cm": 22.3,
                    "timestamp": time.time(),
                    "source": "portico_pulsador"
                }
                
                # Enviar datos
                logger.info("üìä Enviando datos de marcador...")
                success1 = publisher.send_marker_distance(marker_data)
                logger.info(f"Resultado marcador: {'‚úÖ √âxito' if success1 else '‚ùå Error'}")
                
                time.sleep(2)
                
                logger.info("üìä Enviando datos de p√≥rtico...")
                success2 = publisher.send_distance_data(portico_data)
                logger.info(f"Resultado p√≥rtico: {'‚úÖ √âxito' if success2 else '‚ùå Error'}")
                
                # Monitorear conexi√≥n por un tiempo
                logger.info("üîç Monitoreando conexi√≥n por 30 segundos...")
                for i in range(30):
                    time.sleep(1)
                    status = publisher.get_connection_status()
                    
                    if i % 10 == 0:
                        logger.info(f"üìä Estado: DicapuaIoT={status['dicapua_connected']}, Local={status['local_connected']}")
                    
                    # Si se desconecta, esperar reconexi√≥n
                    if not publisher.dicapua_connected:
                        logger.warning(f"üíî Conexi√≥n perdida en segundo {i+1}")
                        logger.info("üîÑ Esperando reconexi√≥n autom√°tica...")
                        
                        # Esperar hasta 60 segundos para reconexi√≥n
                        for j in range(60):
                            time.sleep(1)
                            if publisher.dicapua_connected:
                                logger.info(f"‚úÖ Reconectado autom√°ticamente despu√©s de {j+1} segundos")
                                break
                        break
                
                # Probar env√≠o directo
                if publisher.dicapua_connected:
                    logger.info("üì§ Probando env√≠o directo...")
                    success3 = publisher.publish_distance(15.7, 8.2)
                    logger.info(f"Resultado env√≠o directo: {'‚úÖ √âxito' if success3 else '‚ùå Error'}")
            
            else:
                logger.error("‚ùå No se pudo establecer conexi√≥n")
            
            # Mostrar estado final
            final_status = publisher.get_connection_status()
            logger.info("\nüìã ESTADO FINAL:")
            logger.info(f"  DicapuaIoT: {'‚úÖ Conectado' if final_status['dicapua_connected'] else '‚ùå Desconectado'}")
            logger.info(f"  Local: {'‚úÖ Conectado' if final_status['local_connected'] else '‚ùå Desconectado'}")
            
        else:
            logger.error("‚ùå Error iniciando cliente")
        
        # Detener cliente
        logger.info("üîå Deteniendo cliente...")
        publisher.stop_client()
        logger.info("‚úÖ Cliente detenido")
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba: {e}")
        import traceback
        logger.error(traceback.format_exc())

def main():
    """Funci√≥n principal"""
    test_robust_connection()

if __name__ == "__main__":
    main()