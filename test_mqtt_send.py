#!/usr/bin/env python3
"""
Script de prueba para verificar el env√≠o de datos a DicapuaIoT
"""

import sys
import os
import time
import json
from datetime import datetime

# Agregar el directorio src al path
src_path = os.path.join(os.path.dirname(__file__), 'src')
sys.path.append(src_path)

from mqtt.dicapua_publisher import DicapuaPublisher

def test_mqtt_connection():
    """Prueba la conexi√≥n y env√≠o de datos a DicapuaIoT"""
    print("üß™ Iniciando prueba de conexi√≥n MQTT a DicapuaIoT...")
    
    try:
        # Crear instancia del publisher
        publisher = DicapuaPublisher()
        
        # Iniciar conexi√≥n
        if publisher.start_client_direct_mode():
            print("‚úÖ Conexi√≥n establecida, esperando confirmaci√≥n...")
            
            # Esperar a que se establezca la conexi√≥n
            time.sleep(3)
            
            if publisher.dicapua_connected:
                print("‚úÖ Conexi√≥n confirmada, enviando datos de prueba...")
                
                # Simular datos de marcador y p√≥rtico
                test_marker_data = {
                    'distance_cm': 15.5,
                    'timestamp': datetime.now().isoformat() + 'Z',
                    'source': 'test_marker'
                }
                
                test_portico_data = {
                    'distance_cm': 25.3,
                    'timestamp': datetime.now().isoformat() + 'Z',
                    'source': 'test_portico'
                }
                
                # Enviar datos de marcador
                print("üìè Enviando datos de marcador...")
                success1 = publisher.send_marker_distance(test_marker_data)
                print(f"Resultado marcador: {'‚úÖ √âxito' if success1 else '‚ùå Error'}")
                
                time.sleep(1)
                
                # Enviar datos de p√≥rtico
                print("üèóÔ∏è Enviando datos de p√≥rtico...")
                success2 = publisher.send_distance_data(test_portico_data)
                print(f"Resultado p√≥rtico: {'‚úÖ √âxito' if success2 else '‚ùå Error'}")
                
                time.sleep(2)
                
                # Probar env√≠o directo
                print("üì§ Probando env√≠o directo...")
                success3 = publisher.publish_distance(20.7, 12.4)
                print(f"Resultado env√≠o directo: {'‚úÖ √âxito' if success3 else '‚ùå Error'}")
                
                # Mostrar estado de conexi√≥n
                status = publisher.get_connection_status()
                print("\nüìä Estado de conexi√≥n:")
                print(f"  - DicapuaIoT conectado: {status['dicapua_connected']}")
                print(f"  - Broker: {status['dicapua_broker']}")
                print(f"  - Client ID: {status['client_id']}")
                print(f"  - Usando certificados: {status['use_certs']}")
                
                print("\n‚úÖ Prueba completada. Los datos deber√≠an aparecer en DicapuaIoT.")
                
            else:
                print("‚ùå No se pudo establecer la conexi√≥n a DicapuaIoT")
                
        else:
            print("‚ùå Error al iniciar el cliente MQTT")
            
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Limpiar recursos
        try:
            if 'publisher' in locals():
                publisher.stop_client()
                print("üîå Conexi√≥n cerrada")
        except:
            pass

if __name__ == "__main__":
    test_mqtt_connection()